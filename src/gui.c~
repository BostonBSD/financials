/*
Copyright (c) 2021 BostonBSD. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3)The name of the author may not be used to
    endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

#include "financials.h"

void SetData(){// Set the initial textview box.
    GtkTextBuffer *GUIbuffer;
    GtkTextView *TextView;

    char buffer[4096];
    char silver_spot_price_ch[CH_SIZE], gold_spot_price_ch[CH_SIZE];

    setlocale(LC_ALL, "en_US.UTF-8");
    strfmon(silver_spot_price_ch, CH_SIZE-1, "%n", spot_price_silver_f);// Format output as a monetary value according to the locale
    strfmon(gold_spot_price_ch, CH_SIZE-1, "%n", spot_price_gold_f);

	sprintf(buffer,"========\n  Bullion\n========\n\n");
    sprintf(buffer,"%sGold: \n[Spot Price] %s\t[Premium] %s\t[Ounces] %s\n\nSilver: \n[Spot Price] %s\t\t[Premium] %s\t[Ounces] %s", buffer, gold_spot_price_ch, Gold_Premium_Str, Gold_Ounce_Str, silver_spot_price_ch, Silver_Premium_Str, Silver_Ounce_Str);
    sprintf(buffer,"%s\n\n========\n  Equity\n========\n\n",buffer);

    int c = 0;
    while(c < stock_counter){
        strfmon(Equity[c].current_price_stock_ch, CH_SIZE-1, "%n", Equity[c].current_price_stock_f);
        sprintf(buffer,"%s %s :: %d Shares\t\t[Price] %s\n\n",buffer, Stock_Symbols[c], Stock_Shares[c], current_price_stock_ch[c]);
        c++;
    }

	sprintf(buffer,"%s========\n  Cash\n========\n\n",buffer);

	FormatStr(cash_ch);
	strfmon(cash_ch, CH_SIZE-1, "%n", atof(cash_ch));
	sprintf(buffer,"%s [Cash]\t\t%s",buffer, cash_ch);
	
    //We need two different textview buffers, such that the buffer start and end pointer 
    //references do not collide when performing simultaneous operations with both buttons.

    //Create a new GtkTextBuffer object/widget.
    GUIbuffer = gtk_text_buffer_new(NULL);

    //This will delete whatever is in the GtkTextBuffer and set it to the new string buffer.
    //(This changes the start and end iterator pointers.)
    gtk_text_buffer_set_text (GUIbuffer, buffer, -1);

    //We need to cast a GObject to GtkTextView with a macro.
    TextView = GTK_TEXT_VIEW(gtk_builder_get_object (builder, "TextView1"));// Get the textview GObject from the builder
    //Unreference the current GtkTextBuffer in TextView and set the new one.
    gtk_text_view_set_buffer (TextView, GUIbuffer);

    //Unreference our ownership of this buffer, there is now only a floating reference.
    //This helps prevent a memory leak (the buffer object is destroyed on the next call to
    //gtk_text_view_set_buffer();).
    g_object_unref(GUIbuffer);
}

void *PrintPortfolioValue ()// calc portfolio values, set textbox.
{
    GtkTextBuffer *GUIbuffer;
    GtkTextView *TextView;
    char silver_port_value_ch[CH_SIZE], silver_spot_price_ch[CH_SIZE];
    char gold_port_value_ch[CH_SIZE], gold_spot_price_ch[CH_SIZE];
    char bullion_port_value_ch[CH_SIZE];
    char stock_port_value_ch[CH_SIZE];
    char portfolio_port_value_ch[CH_SIZE];
    char buffer[4096];

    FormatStr(Silver_Premium_Str);
    FormatStr(Silver_Ounce_Str);
    FormatStr(Gold_Premium_Str);
    FormatStr(Gold_Ounce_Str);

    double silver_prem_value_f = atof(Silver_Premium_Str);
    double silver_port_value_f = (silver_prem_value_f + spot_price_silver_f) * atof(Silver_Ounce_Str);

    double gold_prem_value_f = atof(Gold_Premium_Str);
    double gold_port_value_f = (gold_prem_value_f + spot_price_gold_f) * atof(Gold_Ounce_Str);
    
    double bullion_port_value_f = silver_port_value_f + gold_port_value_f;

    setlocale(LC_ALL, "en_US.UTF-8"); // "" is the default system locale, the C.UTF-8 locale does not have a monetary format and is the default on FreeBSD unless changed by the admin.
    strfmon(Silver_Premium_Str, CH_SIZE-1, "%n", silver_prem_value_f);
    strfmon(silver_port_value_ch, CH_SIZE-1, "%n", silver_port_value_f);
    strfmon(silver_spot_price_ch, CH_SIZE-1, "%n", spot_price_silver_f);

    strfmon(Gold_Premium_Str, CH_SIZE-1, "%n", gold_prem_value_f);
    strfmon(gold_port_value_ch, CH_SIZE-1, "%n", gold_port_value_f);
    strfmon(gold_spot_price_ch, CH_SIZE-1, "%n", spot_price_gold_f);

	sprintf(buffer,"========\n  Bullion\n========\n");
    sprintf(buffer,"%sGold: \n[Spot Price] %s\t[Premium] %s\t[Ounces] %s\n[Total] %s\n\nSilver: \n[Spot Price] %s\t\t[Premium] %s\t[Ounces] %s\n[Total] %s", buffer, gold_spot_price_ch, Gold_Premium_Str, Gold_Ounce_Str, gold_port_value_ch, silver_spot_price_ch, Silver_Premium_Str, Silver_Ounce_Str, silver_port_value_ch);
    sprintf(buffer,"%s\n\n========\n  Equity\n========\n",buffer);

    double stock_port_value_f = 0;
    int c = 0;
    while(c < stock_counter){
        current_investment_stock_f[c] = current_price_stock_f[c] * Stock_Shares[c];
        stock_port_value_f += current_investment_stock_f[c];

        strfmon(current_price_stock_ch[c], CH_SIZE-1, "%n", current_price_stock_f[c]);
        strfmon(current_investment_stock_ch[c], CH_SIZE-1, "%n", current_investment_stock_f[c]);

        sprintf(buffer,"%s %s :: %d Shares\n[Price] %s\t\t[Total Value] %s\n\n",buffer, Stock_Symbols[c], Stock_Shares[c], current_price_stock_ch[c], current_investment_stock_ch[c]);
        c++;
    }
	    
	FormatStr(cash_ch);
	double portfolio_port_value_f = bullion_port_value_f + stock_port_value_f + atof(cash_ch);

	strfmon(cash_ch, CH_SIZE-1, "%n", atof(cash_ch));
    sprintf(buffer,"%s========\n [Total Cash] \t\t%s\n",buffer, cash_ch);

	strfmon(bullion_port_value_ch, CH_SIZE-1, "%n", bullion_port_value_f);
	sprintf(buffer,"%s [Total Bullion] \t%s\n",buffer, bullion_port_value_ch);

	strfmon(stock_port_value_ch, CH_SIZE-1, "%n", stock_port_value_f);
    sprintf(buffer,"%s [Total Equity] \t%s\n========\n",buffer, stock_port_value_ch);

	strfmon(portfolio_port_value_ch, CH_SIZE-1, "%n", portfolio_port_value_f);
    sprintf(buffer,"%s [Total Portfolio] \t%s\n========\n",buffer, portfolio_port_value_ch);

    //Create a new GtkTextBuffer object/widget.
    GUIbuffer = gtk_text_buffer_new(NULL);
    //This will delete whatever is in the GtkTextBuffer and set it to the new string buffer.
    gtk_text_buffer_set_text (GUIbuffer, buffer, -1);

    //We need to cast a GObject to GtkTextView with a macro.
    TextView = GTK_TEXT_VIEW(gtk_builder_get_object (builder, "TextView1"));// Get the textview GObject from the builder
    //Unreference the current GtkTextBuffer in TextView and set the new one.
    gtk_text_view_set_buffer (TextView, GUIbuffer);

    //Unreference our ownership of this buffer, there is now only a floating reference.
    g_object_unref(GUIbuffer);
    return NULL;
}
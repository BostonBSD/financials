/*
Copyright (c) 2021 BostonBSD. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3)The name of the author may not be used to
    endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

To Compile {doesn't work in the fish shell}
clang `pkg-config --cflags gtk+-3.0 json-glib-1.0 glib-2.0 libcurl` -o bullion bullion.c `pkg-config --libs gtk+-3.0 json-glib-1.0 glib-2.0 libcurl` -lpthread -Wall -Wextra -Werror
-Wall -Wextra -Werror, flags turn on more warnings and make them errors.
*/

#include <pthread.h>
#include "financials.h"


GtkBuilder *builder;
double spot_price_silver_f = 0.0; // Passing data between button clicks is easier with globals.
double spot_price_gold_f = 0.0;
char curl_url_silver[CH_SIZE], curl_url_gold[CH_SIZE], curl_key[CH_SIZE], stock_url[CH_SIZE];
int stock_counter = 0;
char Silver_Premium_Str[CH_SIZE], Silver_Ounce_Str[CH_SIZE], Gold_Premium_Str[CH_SIZE], Gold_Ounce_Str[CH_SIZE];
char cash_ch[CH_SIZE];
stock Equity[10]; //Up to 10 stock symbols, can change as needed.


void *FetchDataThread(){// A new thread; fetches data, parses data, and sets the GUI label.
	// Read config file and populate associated variables.
	ReadConfig(Silver_Premium_Str,Silver_Ounce_Str,Gold_Premium_Str,Gold_Ounce_Str,Stock_URL,Equity);

	char *JSON_GOLD = GetData(curl_url_gold); // Get JSON data.
    char *JSON_SILVER = GetData(curl_url_silver); // Get JSON data.

    JsonExtractBullion(JSON_GOLD, &spot_price_gold_f); // Extract items from JSON data.
    JsonExtractBullion(JSON_SILVER, &spot_price_silver_f); // Extract items from JSON data.

    char *JSON_STOCK;
    for(int c = 0; c < stock_counter; c++){
        sprintf(Equity[c].curl_url_stock_ch,"%s%s%s",stock_url,Equity[c].symbol_stock_ch,curl_key);
        JSON_STOCK = GetData(Equity[c].curl_url_stock_ch);

        JsonExtractEquity(JSON_STOCK, &Equity[c].current_price_stock_f);
        free(JSON_STOCK);
    }

    SetData(); // Set textview box.

    free(JSON_GOLD);
    free(JSON_SILVER); // Free memory.
    return NULL;
}

static void FetchData()// Initiate a thread
{
    // This will prevent the program from locking up while fetching data.
    pthread_t thread_id;
    pthread_create(&thread_id, NULL, FetchDataThread, NULL);// Create a thread, pass the func and NULL arg to it.
}

static void CalcPort()// Initiate a thread
{
    // This will prevent the program from locking up while calculating data.
    pthread_t thread_id;
    pthread_create(&thread_id, NULL, PrintPortfolioValue, NULL);// Create a thread, pass the func and NULL arg to it.
}

int main (int argc, char *argv[])
{
    GObject *window,*button;
    GError *error = NULL;
    
    gtk_init (&argc, &argv);

    /* Construct a GtkBuilder instance and load our UI description */
    builder = gtk_builder_new ();
    if (gtk_builder_add_from_string (builder, UI, strlen(UI), &error) == 0)
    {
        g_printerr ("Error loading user interface: %s\n", error->message);
        g_clear_error (&error);
        exit(EXIT_FAILURE);
    }
    //===========
    GtkTextBuffer *GUIbuffer;

    //Returns a GObject, need to cast as a GtkTextBuffer.
    GUIbuffer = GTK_TEXT_BUFFER(gtk_builder_get_object (builder, "textbuffer1"));// Get the textview GObject from the builder

    gtk_text_buffer_set_text (GUIbuffer, "Welcome to your financial calculator! \n\n\n\t\t\t\t\t\tPress [Fetch Data] to begin.", -1);
    //===========

    // Read config file and populate associated variables.
    ReadConfig(Silver_Premium_Str,Silver_Ounce_Str,Gold_Premium_Str,Gold_Ounce_Str,Stock_URL,Equity);

    /* Connect signal handlers to the constructed widgets. */
    window = gtk_builder_get_object (builder, "MainWindow");
    g_signal_connect (window, "destroy", G_CALLBACK (gtk_main_quit), NULL);
    
    button = gtk_builder_get_object (builder, "FetchDataBTN");
    g_signal_connect (button, "clicked", G_CALLBACK (FetchData), NULL);

    button = gtk_builder_get_object (builder, "CalcPortBTN");
    g_signal_connect (button, "clicked", G_CALLBACK (CalcPort), NULL);

    button = gtk_builder_get_object (builder, "QuitBTN");
    g_signal_connect (button, "clicked", G_CALLBACK (gtk_main_quit), NULL);

    gtk_main();// Display the GUI window.

    g_object_unref (window);
    g_object_unref (button);
    return 0;
}

/*
Copyright (c) 2021 BostonBSD. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3)The name of the author may not be used to
    endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

#include "financials.h"

void FormatStr(char *s)// Remove all dollar signs '$' and commas ',' from a string
{
    for(int i=0; s[i] != '\0'; i++){// Read character by character until the null character is reached.
        if(s[i]=='$' || s[i]==','){// If we find a '$' OR ',' character
            for(int j = i; s[j] != '\0'; j++){// Read each character thereafter and
                s[j]=s[j+1];// Shift the array down one character [remove the character]
            }
        i--; // Check the new value of this increment [if there were a double character].
        }
    }
}

void ReadConfig(char* Silv_P_ch, char* Silv_O_ch, char* Gold_P_ch, char* Gold_O_ch, char* Stck_URL, stock Eq[]){
    // Read in config file and populate initial varables.
    FILE    *config_file;
    char    line[CH_SIZE], path[CH_SIZE];

    // We need to get the path to the User's home directory:
    uid_t uid = getuid();// Get User ID (need to #include<pwd.h> and #include<unistd.h> for this)
    struct passwd *pw = getpwuid(uid);// Get User Account Information For This ID

    if (pw == NULL) {
        printf("Gathering User Account Info Failed\n");
        exit(EXIT_FAILURE);
    }

    sprintf(path,"%s%s", pw->pw_dir, CONFIG_FILE);// Append the config path to the end of home directory path.

    config_file = fopen(path, "r");// Open the config file.

	stock_counter = 0;
    if(config_file == NULL){
        strcpy(Silv_P_ch,"$0.00");
        strcpy(Silv_O_ch,"0.000");
        strcpy(Gold_P_ch,"$0.00");
        strcpy(Gold_O_ch,"0.000");
    }else{
        while(fgets(line, CH_SIZE, config_file) != NULL){
            if(strstr(line,"Silver_Premium=") != NULL){// The line is ignored unless it contains a keyword.
                strcpy(Silv_P_ch, strstr(line,"=")+1);// Copy the argument immediately after the '=' character.				
				Silv_P_ch[strcspn(Silv_P_ch,"\n")] = 0;// Find the location of the newline character, if any, if not the NULL location is returned.
				// Replace the newline character with the NULL character [remove the newline char]
				// Otherwise replace NULL with NULL.
			}

            if(strstr(line,"Silver_Ounces=") != NULL){
                strcpy(Silv_O_ch, strstr(line,"=")+1);
                Silv_O_ch[strcspn(Silv_O_ch,"\n")] = 0;
            }

            if(strstr(line,"Gold_Premium=") != NULL){
                strcpy(Gold_P_ch, strstr(line,"=")+1);
                Gold_P_ch[strcspn(Gold_P_ch,"\n")] = 0;
            }

            if(strstr(line,"Gold_Ounces=") != NULL){
                strcpy(Gold_O_ch, strstr(line,"=")+1);
                Gold_O_ch[strcspn(Gold_O_ch,"\n")] = 0;
            }

            if(strstr(line,"Silver_URL=") != NULL){// The next four set the global URL and Key variables
                strcpy(curl_url_silver, strstr(line,"=")+1);
                curl_url_silver[strcspn(curl_url_silver,"\n")] = 0;
            }

            if(strstr(line,"Gold_URL=") != NULL){
                strcpy(curl_url_gold, strstr(line,"=")+1);
                curl_url_gold[strcspn(curl_url_gold,"\n")] = 0;
            }

            if(strstr(line,"Stock_URL=") != NULL){
                strcpy(Stck_URL, strstr(line,"=")+1);
                Stck_URL[strcspn(Stck_URL,"\n")] = 0;
            }

            if(strstr(line,"URL_KEY=") != NULL){
                strcpy(curl_key, strstr(line,"=")+1);
                curl_key[strcspn(curl_key,"\n")] = 0;
            }

            if(strstr(line,"STOCK=") != NULL){//If there is a 'STOCK' keyword, there needs to be a 
                strcpy(Eq[stock_counter].symbol_stock_ch, strstr(line,"=")+1);//'SHARES' keyword to register
                Eq[stock_counter].symbol_stock_ch[strcspn(Eq[stock_counter].symbol_stock_ch,"\n")] = 0;
            }

            if(strstr(line,"SHARES=") != NULL){
                Stck_Shrs[stock_counter] = atoi(strstr(line,"=")+1);
                stock_counter++;
            }

			if(strstr(line,"CASH=") != NULL){
				strcpy(cash_ch, strstr(line,"=")+1);
				cash_ch[strcspn(cash_ch,"\n")] = 0;
            }
        }
        fclose(config_file);
    }
}
